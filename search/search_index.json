{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Locasticsearch Serverless full text search in Python Locasticsearch provides serverless full text search powered by sqlite full text search capabilities but trying to be compatible with (a subset of) the elasticsearch API. That way you can comfortably develop your text search appplication without needing to set up services and smoothly transition to Elasticsearch for scale or more features without changing your code. That said, if you are only doing basic search operations within the subset supported by this library, and dont have a lot of documents (~million) that would justify going for a cluster deployment, Locasticsearch can be a faster alternative to Elasticsearch. Getting started from locasticsearch import Locasticsearch from datetime import datetime es = Locasticsearch() doc = { \"author\": \"kimchy\", \"text\": \"Elasticsearch: cool. bonsai cool.\", \"timestamp\": datetime(2010, 10, 10, 10, 10, 10), } res = es.index(index=\"test-index\", doc_type=\"tweet\", id=1, body=doc) res = es.get(index=\"test-index\", doc_type=\"tweet\", id=1) print(res[\"_source\"]) es.indices.refresh(index=\"test-index\") res = es.search(index=\"test-index\", body={\"query\": {\"match_all\": {}}}) print(\"Got %d Hits:\" % res[\"hits\"][\"total\"][\"value\"]) for hit in res[\"hits\"][\"hits\"]: print(\"%(timestamp)s %(author)s: %(text)s\" % hit[\"_source\"]) Features \ud83d\udcaf% local, no server management \u2728 Lightweight pure python, no external dependencies \u26a1 Super fast searches thanks to sqlite full text search capabilities \ud83d\udd17 No lock in. Thanks to the API compatiblity with the official client, you can smoothly transition to Elasticsearch for scale or more features without changing your code. Install pip install locasticsearch To use or not to use You should NOT use Locasticsearch if: you are deploying a security sensitive application. Locasticsearch code is very prone to SQL injection attacks. This should improve in future releases. Your searches are more complicated than what you would find in a 5 min Elasticsearch tutorial. Elasticsearch has a huge API and it is very unlikely that we can support even a sizable portion of that. You hate buggy libraries. Locasticsearch is a very young project so bugs are guaranteed. You can check the tests to see if your needs are covered. You should use Locasticsearch if: you dont want a docker or an elasticsearch service using precious resources in your laptop you only need basic text search and Elasticsearch would be overkill you want very easy deployments that only involve pip installs using Java from a python program makes you feel dirty Comparison to similar libraries whoosh The most full featured pure python text search library by far Supports highlight, analyzers, query expansion, ... Unmaintained for a long time might see a revival at https://github.com/whoosh-community/whoosh elasticsearch The big champion of full text search. Lots of features to accomodate any use case, battle tested, scalable. xapian very fast and full featured (C++) but very difficult to install (needs system level compilation) The python bindings and the documentation are not that user friendly gensim While gensim focuses on topic modeling you can use TfidfModel and SparseMatrixSimilarity for text search. That said this is doesnt use an inverted index (linear search) so it has limited scalability.","title":"locasticsearch"},{"location":"#locasticsearch","text":"Serverless full text search in Python Locasticsearch provides serverless full text search powered by sqlite full text search capabilities but trying to be compatible with (a subset of) the elasticsearch API. That way you can comfortably develop your text search appplication without needing to set up services and smoothly transition to Elasticsearch for scale or more features without changing your code. That said, if you are only doing basic search operations within the subset supported by this library, and dont have a lot of documents (~million) that would justify going for a cluster deployment, Locasticsearch can be a faster alternative to Elasticsearch.","title":"Locasticsearch"},{"location":"#getting-started","text":"from locasticsearch import Locasticsearch from datetime import datetime es = Locasticsearch() doc = { \"author\": \"kimchy\", \"text\": \"Elasticsearch: cool. bonsai cool.\", \"timestamp\": datetime(2010, 10, 10, 10, 10, 10), } res = es.index(index=\"test-index\", doc_type=\"tweet\", id=1, body=doc) res = es.get(index=\"test-index\", doc_type=\"tweet\", id=1) print(res[\"_source\"]) es.indices.refresh(index=\"test-index\") res = es.search(index=\"test-index\", body={\"query\": {\"match_all\": {}}}) print(\"Got %d Hits:\" % res[\"hits\"][\"total\"][\"value\"]) for hit in res[\"hits\"][\"hits\"]: print(\"%(timestamp)s %(author)s: %(text)s\" % hit[\"_source\"])","title":"Getting started"},{"location":"#features","text":"\ud83d\udcaf% local, no server management \u2728 Lightweight pure python, no external dependencies \u26a1 Super fast searches thanks to sqlite full text search capabilities \ud83d\udd17 No lock in. Thanks to the API compatiblity with the official client, you can smoothly transition to Elasticsearch for scale or more features without changing your code.","title":"Features"},{"location":"#install","text":"pip install locasticsearch","title":"Install"},{"location":"#to-use-or-not-to-use","text":"You should NOT use Locasticsearch if: you are deploying a security sensitive application. Locasticsearch code is very prone to SQL injection attacks. This should improve in future releases. Your searches are more complicated than what you would find in a 5 min Elasticsearch tutorial. Elasticsearch has a huge API and it is very unlikely that we can support even a sizable portion of that. You hate buggy libraries. Locasticsearch is a very young project so bugs are guaranteed. You can check the tests to see if your needs are covered. You should use Locasticsearch if: you dont want a docker or an elasticsearch service using precious resources in your laptop you only need basic text search and Elasticsearch would be overkill you want very easy deployments that only involve pip installs using Java from a python program makes you feel dirty","title":"To use or not to use"},{"location":"#comparison-to-similar-libraries","text":"whoosh The most full featured pure python text search library by far Supports highlight, analyzers, query expansion, ... Unmaintained for a long time might see a revival at https://github.com/whoosh-community/whoosh elasticsearch The big champion of full text search. Lots of features to accomodate any use case, battle tested, scalable. xapian very fast and full featured (C++) but very difficult to install (needs system level compilation) The python bindings and the documentation are not that user friendly gensim While gensim focuses on topic modeling you can use TfidfModel and SparseMatrixSimilarity for text search. That said this is doesnt use an inverted index (linear search) so it has limited scalability.","title":"Comparison to similar libraries"}]}